library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity IO is
	port(
			CLK_50MHZ : in std_logic;
			dataIn : in std_logic_vector(7 downto 0);
			sel : in std_logic;
			CPUclk : out std_logic;
			DISP : out std_logic_vector(7 downto 0);
			COL : out std_logic_vector(2 downto 0)
			);
end entity;

architecture arch of Logic_test is
signal data : integer := 0;
signal CLK_500HZ, CLK_5HZ : std_logic;
signal cntActiveDigit, cnt_5HZ : integer := 1;
signal cnt_state : integer := 0;
signal activeDigit : integer := 0;

begin
	process (CLK_50MHZ) --1000Hz prescaler
	begin
		if rising_edge(CLK_50MHZ) then
			cntActiveDigit <= cntActiveDigit + 1;
			if (cntActiveDigit = 50000) then
				CLK_500HZ <= not CLK_500HZ;
				cntActiveDigit <= 0;
			end if;
		end if;
	end process;
	
	process (CLK_500HZ)	--Digit refresh counter
	begin
		if(rising_edge(CLK_500HZ)) then
			activeDigit <= activeDigit + 1;
			if (activeDigit = 2) then
				activeDigit <= 0;
			end if;
		end if;
	end process;
	
	process (CLK_500HZ) --5Hz prescaler
	begin
		if (rising_edge(CLK_500HZ)) then
			cnt_5HZ <= cnt_5HZ + 1;
			if(cnt_5HZ = 25) then
				cnt_5HZ <= 0;
				CLK_5HZ <= not CLK_5HZ;
			end if;
		end if;
	end process;
	
	
	
	process (data, activeDigit)
	variable tmpDigit : std_logic_vector(7 downto 0);
	variable tmpDigitInt : integer;
	begin
		tmpDigit := std_logic_vector(to_unsigned(data, tmpDigit'length));
		if(activeDigit = 0) then
			tmpDigitInt := to_integer(unsigned(tmpDigit(3 downto 0)));
		else
			tmpDigitInt := to_integer(unsigned(tmpDigit(7 downto 4)));
		end if;
					
		case tmpDigitInt is
			when 0 => DISP <= "00000011";
			when 1 => DISP <= "10011111";
			when 2 => DISP <= "00100101";
			when 3 => DISP <= "00001101";
			when 4 => DISP <= "10011001";
			when 5 => DISP <= "01001001";
			when 6 => DISP <= "01000001";
			when 7 => DISP <= "00011111";
			when 8 => DISP <= "00000001";
			when 9 => DISP <= "00011001";
			when 10 => DISP <= "00010001";
			when 11 => DISP <= "11000001";
			when 12 => DISP <= "01100011";
			when 13 => DISP <= "10000101";
			when 14 => DISP <= "01100001";
			when 15 => DISP <= "01110001";
			when others => DISP <= "11111111";
		end case;
	
	end process;
	

	COL <= "001" when activeDigit = 0 else
			 "010" when activeDigit = 1 else
			 "000";
			 
	CPUclk <= CLK_5HZ; 
end architecture;
	

